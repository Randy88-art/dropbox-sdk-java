import com.dropbox.stone.java.StoneTask
import com.dropbox.stone.java.model.ClientSpec
import com.dropbox.stone.java.model.StoneConfig

plugins {
    id("java-library")
    id("com.dropbox.stone.java")
}

dependencies {
    api(dropboxJavaSdkLibs.jackson.core)
    api(dropboxJavaSdkLibs.jsr305)
}

tasks.named("generateStone", StoneTask) {
    String unusedClassesToGenerate = 'AuthError, PathRoot, PathRootError, AccessError, RateLimitError'
    String packageName = 'com.dropbox.core.v2'
    String globalRouteFilter = 'alpha_group=null and beta_group=null'

    generatorFile.set(project.rootProject.layout.projectDirectory.file("core/generator/java/java.stoneg.py"))
    stoneDir.set(project.rootProject.layout.projectDirectory.dir("core/stone"))
    specDir.set(project.rootProject.layout.projectDirectory.dir("core/src/main/stone"))

    routeWhitelistFilter.set(project.layout.projectDirectory.file("route_allowlist.json"))
    stoneConfigs.add(new StoneConfig(packageName: packageName, dataTypesOnly: true))
}

tasks.named("generateTestStone", StoneTask) {
    String packageName = 'com.dropbox.core.stone'

    pythonCommand.set("python3")
    generatorFile.set(project.rootProject.layout.projectDirectory.file("core/generator/java/java.stoneg.py"))
    stoneDir.set(project.rootProject.layout.projectDirectory.dir("core/stone"))
    specDir.set(project.rootProject.layout.projectDirectory.dir("core/src/main/stone"))

    routeWhitelistFilter.set(project.layout.projectDirectory.file("route_allowlist.json"))
    stoneConfigs.add(new StoneConfig(packageName: packageName, dataTypesOnly: true))
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}